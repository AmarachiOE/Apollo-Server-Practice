https://www.apollographql.com/docs/apollo-server/data/data/

Fetching Data with Resolvers
    - In order to respond to queries, a schema needs to have resolve functions for all fields called the "resolver map"
    - resolver map relates the schema fields and types to a function
    - Resolvers can separated into distinct objects --> modularizing resolvers
    - In addition to returning GQL scalars, you can return custom scalars for special use cases such as JSON or big integers


Example Resolver Map:
    const { gql } = require('apollo-server');
    const { find, filter } = require('lodash');

    const schema = gql`
        type Book {
            title: String
            author: Author
        }

        type Author {
            books: [Book]
        }

        type Query {
            author: Author
        }
    `;

    # ########  RESOLVER MAP (note: relations between types... Query -- Author -- Book)

    const resolvers = {
        Query: {
            author(parent, args, context, info) {
            return find(authors, { id: args.id });
            },
        },

        Author: {
            books(author) {
            return filter(books, { author: author.name });
            },
        },
    };

    - Explanation:
    - For the above map, the query, {  author  {  books  }  }, will call the Query.author resolver first and pass its results to Author.books
    - The query result will contain the return value of Author.books nested under data.author.books

Resolver Type Signature:
    - aside from parent resolvers' value, resolvers receive a few more args
    - the full resolver func signature contains 4 positional args:
      (parent, args, context, info) and can return an object or Promise
    - once a Promise resolves, the children resolvers will continue executing (useful for fetching data from BE)

Resolver Parameters Naming and Description:
    - parent: the object that contains the result returned from the resolver on the parent field, or, in the case of a top-level Query field, the rootValue passed from the server configuration.

    - args: an object with the args passed into the field in the query: 
    query{ key(arg: "you meant") }, 
    the args object would be: { "arg": "you meant" }

    - context: an object shared by all resolvers in a particular query, and is used to contain per-request state, including authentication info, dataloader instances, and anything else that should be taken into account when resolving the query (like the headers!)

    - info: contains info about the execution state of the query, including the field name, path to the field from the root, and more.


Resolver Results:
    - Resolvers can return diff kinds of results which are treated differently:

    - Null or Undefined: object can not be found

    - Array: only valid of schema indicates that result of a field should be a list

    - Promise: resolvers often do async actions like fetching from a DB or BE API, so they can return promises. Can be combined with arrays, so a resolver can return a promise that resolves to an array or array of promises, and both are handled correctly

    - Scalar or Object value: resolver can also return any other kind of value, which doesn't have any special meaning but is simply passed down into any nested resolvers


Parent Argument:
    - the 1st arg in every resolver, parent, can be a 

    query {
        getAuthor(id: 5){
            name
            posts {
                title
                author {
                    name # this will be the same as the name above
                }
            }
        }
    }

    - Every GraphQL query is a tree of function calls in the server. So the parent contains the result of parent resolver, in this case:

    1. parent in Query.getAuthor will be whatever the server configuration passed for rootValue
    2. parent in Author.name and Author.posts will be the result from getAuthor, likely an Author object from the backend
    3. parent in Post.title and Post.author will be one item from the posts result array
    4. parent in Author.name is the result from the above Post.author call


Context Argument (3rd arg):
    - It is useful for passing things that any resolver may need, like authentication scope, DB connections, custom fetch functions

    - Additionally, if you're using dataloaders to batch requests across resolvers, you cna attach them to context as well

    - Should be the same for all resolvers, and resolvers should never modify it (ensuring consistency across resolvers and helps increase dvlpmt velocity)

    - To provide a context to your resolver, add a context object to the Apollo Server constructor. The constructor gets called with every request, so you can set the context based off the details of the req (like HTTP headers)

    const server = new ApolloServer({
        typeDefs,
        resolvers,
        context: ({ req }) => ({
            authScope: getScope(req.headers.authorization)
        })
    }));

    // resolver
    (parent, _, context) => {
        if(context.authScope !== ADMIN) throw AuthenticationError('not admin');
        ...
    }

    - Context can also be created async, allowing DB connections and other ops to complete

    context: async () => ({
        db: await client.connect(),
    })

    // resolver
    (parent, _, context) => {
        return context.db.query('SELECT * FROM table_name');
    }


Default Resolvers:

    - Explicit resolvers are not needed for every type, since Apollo Server provides a default that can perform 2 actions depending on the contents of parent:

    1. Return the property from parent with the relevant field name 

    2. Calls a func on parent with the relevant field name and provide the remaining resolver parameters as args

    - For the following schema, the title field of Book would not need a resolver if the result of the books resolver provided a list of objects that already contained a title field:

    type Book {
        title: String
    }

    type Author {
        books: [Book]
    }


Modularizing Resolvers:  https://www.apollographql.com/docs/apollo-server/data/data/#modularizing-resolvers

    - Can accomplish modularity with resolvers by passing around multiple resolver objects and combining them together with Lodash's merge or other equivalent:

    // comment.js
    const resolvers = {
        Comment: { ... }
    }

    export resolvers;

    // post.js
    const { merge } = require('lodash');

    const Comment = require('./comment');
    const resolvers = merge({
        Post: { ... }
    }, Comment.resolvers);

    export resolvers;
