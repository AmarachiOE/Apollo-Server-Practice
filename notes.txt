::::::::::::::::::::: SET-UP :::::::::::::::::::::

From website: https://www.apollographql.com/docs/apollo-server/getting-started/

Initialize Project
- new repo with readme on github
$ git clone <url>
$ cd <folder>
$ npm init --yes
$ npm install apollo-server graphql
$ touch index.js

1. Install dependencies

2. Define schema

3. Define data set

4. Resolver:
    - We've defined our data set, but Apollo Server doesn't know that it should use that data set when it's executing a query. To fix this, we create a resolver.

    - Resolvers tell Apollo Server how to fetch the data associated with a particular type. Because our Book array is hardcoded, the corresponding resolver is straightforward.


5. Create Instance of Apollo Server:
    - We've defined our schema, data set, and resolver. Now we just need to provide this information to Apollo Server when we initialize it.

    - Then run in command line $ node index.js

6. Test Queries:
    - Go to http://localhost:4000/
    - Test this query:
        {
            books {
                title
                author
            }
        }


SDL: Schema Definition Language:
    - GraphQL implements a human-readable schema syntax known as its Schema Definition Language, or "SDL". The SDL is used to express the types available within a schema and how those types relate to each other (describes SHAPE and RELATIONSHIP of data to return).

    - At first glance the SDL may appear to be similar to JavaScript, but this GraphQL-specific syntax must be stored as a String.

    - Examples:

    type Book {
    title: String
    author: Author
    }

    type Author {
    name: String
    books: [Book]
    }

::::::::::::::::::::: SDL TYPES :::::::::::::::::::::

Scalar Types:
    - Scalar types represent the leaves of an operation and always resolve to concrete data. The default scalar types which GraphQL offers are:
    - Int
    - Float
    - String
    - Boolean
    - ID (serialized as String)

Object Types:
    - The object type is the most common type used in a schema and represents a group of fields. 
    - Each field inside of an object type maps to another type, allowing nested types and circular references.
    - Example:
        type TypeName {
            fieldA: String
            fieldB: Boolean
            fieldC: Int
            fieldD: CustomType
        }

        type CustomType {
            circular: TypeName
        }

Root Operation Types: Query, Mutation, Subscription

Query Type:
    - A GraphQL query is for fetching data and compares to the GET verb in REST-based APIs
    - In example Query type, we define two types of queries which are available on this GraphQL server:
        - getBooks: which returns a list of Book objects.
        - getAuthors: which returns a list of Author objects.

    type Query {
        getBooks: [Book]
        getAuthors: [Author]
    }

    - [Book!]!:
        - The inner exclamation mark says that each entry in the array must be a Book — it cannot be Null.
        - The outer exclamation mark says that the array itself cannot be Null — at a minimum, it should be an empty array.

    - Those familiar with REST-based APIs would normally find these located on separate GET end-points (e.g. /api/books and /api/authors), but GraphQL allows them to be queried at the same time and returned at once.

    - Example client query:
    query {
        getBooks {
            title
        }

        getAuthors {
            name
        }
    }
    - returns 2 separate lists. But if wanted 1 list of books with their authors in same list:
    query {
        getBooks {
            title
            author {
                name
            }
        }
    }

Mutation Type:
    - operations sent to server to create, update, delete data (post, put, delete)
    - specifies the entry points for data manipulation operations
    - Multiple mutations may be sent in the same request, however they will be executed in the order they are provided (in series), in order to avoid race-conditions within the operation.
    - Ex: Mutation type for adding a book:
        type Mutation {
            addBook(title: String, author: String): Book
        }

    - Ex: mutation request on client: 
    - (add new book, then return title and author)
        mutation {
            addBook(title: "Fox in Socks", author: "Dr. Seuss") {
                title
                author {
                    name
                }
            }
        }


Descriptions:
    - can use "blah blah" or """ blaahhh """ for single- or multi-line descriptions of types of fields

General Conventions:
    - Fields --> camelCase      (similar variable names)
    - Types --> PascalCase      (similar class names)
    - Enums --> 
                Type name: PascalCase (Weekdays)
                Variable name: ALL_CAPS (MONDAY, TUESDAY...) (similar to constants) 
    

Designing Queries for Client Needs
    - For example, let's say you want to create a view that lists some events, their locations, and the weather at that location. In that case, you might want to do a query like this:

    query EventList {
        upcomingEvents {
            name
            date
            location {
                name
                weather {
                    temperature
                    description
                }
            }
        }
    }

    - The desire to display this data could inform the design of a schema like the following:

    type Query {
        upcomingEvents: [Event]
        # Other fields, etc
    }

    type Event {
        name: String
        date: String
        location: Location
    }

    type Location {
        name: String
        weather: WeatherInfo
    }

    type WeatherInfo {
        temperature: Float
        description: String
    }


Designing Mutations:
    - Mutation type is designed with the expectation that there will be a response object, so that client won't have to re-query
    - Ex: updating User's age:

    type Mutation {
        updateUserAge(id: ID!, age: Int!): User
    }

    type User {
        id: ID!
        name: String!
        age: Int!
    }

    - Ex client request:
    mutation updateMyUser {
        updateUserAge(id: 1, age: 25){
            id
            age
            name
        }
    }


Mutation Responses:
    - return updated fields in a mutation
    - always returns  or "throw" errors if occur during a mutation
    - or make sure to return which fields failed to update and which fields successfully updated (transactional information)
    - Suggestion: implement a MutationResponse interface to be implemented on every mutation response (enables transactional info to be returned to normal mutation response)

    - Example 1:
    interface MutationResponse {
        code: String!
        success: Boolean!
        message: String!
    }

    type UpdateUserMutationResponse implements MutationResponse {
        code: String!
        success: Boolean!
        message: String!
        user: User
    }

    - Calling a mutation that returns that  UpdateUserMutationResponse type would result in a response that looks something like this:

    {
        "data": {
            "updateUser": {
                "code": "200",
                "success": true,
                "message": "User was successfully updated",
                "user": {
                    "id": "1",
                    "name": "Jane Doe",
                    "age": 35
                }
            }
        }
    }

    - Example 2: likePost type, which could affect a user's "reputation" and also update the post itself, might implement MutationResponse in the following manner:

    type LikePostMutationResponse implements MutationResponse {
        code: String!
        success: Boolean!
        message: String!
        post: Post
        user: User
    }

    - we've provided the expectation that both the user and the post would be returned and an actual response to a likePost mutation could be:

    {
        "data": {
            "likePost": {
                "code": "200",
                "success": true,
                "message": "Thanks!",
                "post": {
                    "likes": 5040
                },
                "user": {
                    "reputation": 11
                }
            }
        }
    }

Using and Passing in Input types:
    - Instead of passing in info when creatingPost like this:

    type Mutation {
        createPost(title: String, body: String, mediaUrls: [String]): Post
    }

    - Use an Input type like so:
    type Mutation {
        createPost(post: PostAndMediaInput): Post
    }

    input PostAndMediaInput {
        title: String
        body: String
        mediaUrls: [String]
    }

    - Can also use descriptions in an Input type:

    input PostAndMediaInput {
        "A main title for the post"
        title: String
        "The textual body of the post."
        body: String
        "A list of URLs to render in the post."
        mediaUrls: [String]
    }

    - Though possible to reuse an input type bw a query and mutation which target the same resource, it's best to avoid this since in many cases certain null fields might be tolerated for one but not the other
