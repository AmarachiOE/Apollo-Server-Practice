::::::::::::::::::::: SET-UP :::::::::::::::::::::

From website: https://www.apollographql.com/docs/apollo-server/getting-started/

Initialize Project
- new repo with readme on github
$ git clone <url>
$ cd <folder>
$ npm init --yes
$ npm install apollo-server graphql
$ touch index.js

1. Install dependencies

2. Define schema

3. Define data set

4. Resolver:
    - We've defined our data set, but Apollo Server doesn't know that it should use that data set when it's executing a query. To fix this, we create a resolver.

    - Resolvers tell Apollo Server how to fetch the data associated with a particular type. Because our Book array is hardcoded, the corresponding resolver is straightforward.


5. Create Instance of Apollo Server:
    - We've defined our schema, data set, and resolver. Now we just need to provide this information to Apollo Server when we initialize it.

    - Then run in command line $ node index.js

6. Test Queries:
    - Go to http://localhost:4000/
    - Test this query:
        {
            books {
                title
                author
            }
        }


SDL: Schema Definition Language:
    - GraphQL implements a human-readable schema syntax known as its Schema Definition Language, or "SDL". The SDL is used to express the types available within a schema and how those types relate to each other (describes SHAPE and RELATIONSHIP of data to return).

    - At first glance the SDL may appear to be similar to JavaScript, but this GraphQL-specific syntax must be stored as a String.

    - Examples:

    type Book {
    title: String
    author: Author
    }

    type Author {
    name: String
    books: [Book]
    }

::::::::::::::::::::: TYPES :::::::::::::::::::::

Scalar Types:
    - Scalar types represent the leaves of an operation and always resolve to concrete data. The default scalar types which GraphQL offers are:
    - Int
    - Float
    - String
    - Boolean
    - ID (serialized as String)

Object Types:
    - The object type is the most common type used in a schema and represents a group of fields. 
    - Each field inside of an object type maps to another type, allowing nested types and circular references.
    - Example:
        type TypeName {
            fieldA: String
            fieldB: Boolean
            fieldC: Int
            fieldD: CustomType
        }

        type CustomType {
            circular: TypeName
        }
        
Root Operation Types: Query, Mutation, Subscription

Query Type:
    - A GraphQL query is for fetching data and compares to the GET verb in REST-based APIs
    - In example Query type, we define two types of queries which are available on this GraphQL server:
        - getBooks: which returns a list of Book objects.
        - getAuthors: which returns a list of Author objects.

    type Query {
        getBooks: [Book]
        getAuthors: [Author]
    }

    - [Book!]!:
        - The inner exclamation mark says that each entry in the array must be a Book — it cannot be Null.
        - The outer exclamation mark says that the array itself cannot be Null — at a minimum, it should be an empty array.

    - Those familiar with REST-based APIs would normally find these located on separate GET end-points (e.g. /api/books and /api/authors), but GraphQL allows them to be queried at the same time and returned at once.

    - Example client query:
    query {
        getBooks {
            title
        }

        getAuthors {
            name
        }
    }
    - returns 2 separate lists. But if wanted 1 list of books with their authors in same list:
    query {
        getBooks {
            title
            author {
                name
            }
        }
    }
